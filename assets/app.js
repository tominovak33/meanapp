angular.module("app",["ngRoute","ngAnimate"]),angular.module("app").controller("ApplicationCtrl",["$scope","$rootScope","UserSvc",function(t,e,n){t.baseUrl=location.host,window.localStorage.token&&n.getUser().then(function(e){t.$emit("userLoggedIn",e.data)}),t.$on("userLoggedIn",function(e,n){t.currentUser=n}),t.logout=function(){n.logout()}}]).filter("output_html",["$sce",function(t){return function(e){return t.trustAsHtml(e)}}]).filter("startFrom",function(){return function(t,e){return t?(e=+e,t.slice(e)):[]}}),angular.module("app").directive("staticInclude",["$http","$templateCache","$compile",function(t,e,n){return function(o,r,s){var a=s.staticInclude;t.get(a,{cache:e}).success(function(t){var e=r.html(t).contents();n(e)(o)})}}]).directive("afterRender",["$timeout",function(t){var e={restrict:"A",terminal:!0,transclude:!1,link:function(e,n,o){t(e.$eval(o.afterRender),0)}};return e}]),angular.module("app").controller("LoginCtrl",["$scope","UserSvc",function(t,e){t.login=function(n,o){e.login(n,o).then(function(e){t.$emit("userLoggedIn",e.data),window.location.href="#/"},function(e){t.loginValidation="Incorrect username & password combination"})},t.logout=function(){e.logout()}}]),angular.module("app").controller("PostsCtrl",["$scope","$http","PostsService","filterFilter","UserSvc","$timeout",function(t,e,n,o,r,s){t.baseUrl=location.host,t.bodyLengthLimit=250,t.postTagsArray=[],t.ckLoaded=!1,t.posts=[],t.addPost=function(){try{var e=CKEDITOR.instances.editor1.getData()}catch(o){console.error("CKEDITOR has not been loaded")}if(!e)var e=t.postContent;var r=t.urlDate(),s=t.slugify(t.postTitle),a=r+s;e&&n.send({body:e,title:t.postTitle,tags:t.postTagsArray,slug:a}).success(function(e){t.postBody=null,CKEDITOR.instances.editor1.setData(""),t.postTitle=null})},t.$on("$includeContentLoaded",function(){t.init_ckeditor()}),t.init_ckeditor=function(){var e=!!document.getElementById("editor1");if(t.ckLoaded=!0,e){CKEDITOR.replace("editor1",{allowedContent:!0})}else t.ckLoaded=!1},t.$on("ws:new_post",function(e,n){n=n[0],t.$apply(function(){t.posts.unshift(n),t.paginate()})}),t.$on("$viewContentLoaded",function(){}),t.currentPage=1,t.postsPerPage=5,t.prevPage=function(){t.currentPage>1&&t.currentPage--},t.nextPage=function(){t.currentPage<t.posts.length/t.postsPerPage&&t.currentPage++},t.setPage=function(e){t.currentPage=e},t.range=function(t){return new Array(t)},t.$watch("search",function(e){t.filteredPosts=o(t.posts,e),t.paginate(t.filteredPosts.length)},!0),t.paginate=function(e){t.numberOfPages=Math.ceil(e>0?e/t.postsPerPage:t.posts.length/t.postsPerPage)},t.urlDate=function(t){if(void 0===t)var e=new Date;else var e=new Date(t);var n=e.getDate(),o=e.getMonth()+1,r=e.getFullYear();return String(r)+"/"+String(o)+"/"+String(n)+"/"},t.$watch("postTitle",function(e){e&&t.generateSlug(e)},!0),t.generateSlug=function(){t.slug=t.urlDate()+t.slugify(t.postTitle)},t.slugify=function(t){var e=t.toLowerCase();return e=e.replace(/\s+/g,"-"),e=e.replace(/\?/g,""),e=e.replace(/\&/g,""),e=e.replace(/\=/g,"")},t.addTag=function(e){t.postTagsArray.push(e),t.postTag=""},t.removeTag=function(e){t.postTagsArray.splice(e,1)},n.get().success(function(e){t.posts=e,t.paginate(t.posts.length)})}]),angular.module("app").service("PostsService",["$http",function(t){this.get=function(){return t.get("/api/posts")},this.send=function(e){return t.post("/api/posts",e)},this.removeItem=function(e){return t.post("/api/posts/removeItem",{params:{post_id:e.post_id}})},this.single_slug=function(e){return t.get("/api/posts",{params:{post_slug:e.slug}})},this.single_id=function(e){return t.get("/api/posts",{params:{post_id:e.id}})},this.user_posts=function(e){return t.get("/api/posts",{params:{_author:e._author}})},this.filtered_posts=function(e){return t.get("/api/posts",{params:e})}}]),angular.module("app").controller("ProfileCtrl",["$scope","$http","UserSvc","PostsService","$routeParams","$route","$location",function(t,e,n,o,r,s,a){t.editPermission=function(e){n.authorization().then(function(e){t=e})},t.baseUrl=location.host;var i=r.username;t["new"]={},n.profile(i).success(function(e){t.user_profile=e,o.user_posts({_author:t.user_profile._id}).success(function(e){t.user_posts=e,t.paginate(t.user_posts.length)})}),t.checkLogin=function(){window.localStorage.token&&n.getUser().then(function(e){t.currentUser=e.data,(t.user_profile._id==t.currentUser._id||t.editPermission(t.currentUser.permission_level))&&(t.canEdit=!0)})},t.currentUser=[],t.checkLogin(),t.$on("$viewContentLoaded",function(){}),t.user_posts=[],t.currentPage=1,t.postsPerPage=5,t.prevPage=function(){t.currentPage>1&&t.currentPage--},t.nextPage=function(){t.currentPage<t.user_posts.length/t.postsPerPage&&t.currentPage++},t.setPage=function(e){t.currentPage=e},t.range=function(t){return new Array(t)},t.paginate=function(e){t.numberOfPages=Math.ceil(e>0?e/t.postsPerPage:t.user_posts.length/t.postsPerPage)},t.range=function(t){return new Array(t)},n.authorization("10").then(function(t){console.log(t)}),t.saveProfile=function(){var e={_id:t.user_profile._id};for(var o in t["new"])t["new"].hasOwnProperty(o)&&""!=t["new"][o]&&(e[o]=t["new"][o]);n.profileUpdate(e).success(function(e){e.username!=t.user_profile.username?(t.returnMessage="Your username was changed so you must log in again",setTimeout(function(){window.location.href="/#/login"},1500)):t.returnMessage="Details updated successfully"})}}]),angular.module("app").controller("RegisterCtrl",["$scope","UserSvc",function(t,e){t.register=function(n,o,r){return o!=r?void(t.validationMessage="Your passwords did not match."):void e.register(n,o)}}]),angular.module("app").config(["$routeProvider",function(t){t.when("/",{controller:"PostsCtrl",templateUrl:"post/allPosts.html"}).when("/login",{controller:"LoginCtrl",templateUrl:"login.html"}).when("/post/:year/:month/:day/:slug",{controller:"SinglePostCtrl",templateUrl:"post/singlePost.html"}).when("/post/id/:id",{controller:"SinglePostCtrl",templateUrl:"singlePost.html"}).when("/post/new/",{controller:"PostsCtrl",templateUrl:"post/newPost.html"}).when("/user/:username",{controller:"ProfileCtrl",templateUrl:"post/userPosts.html"}).when("/tag/:tag",{controller:"TagCtrl",templateUrl:"post/tagPage.html"})}]),angular.module("app").controller("SinglePostCtrl",["$scope","$http","PostsService","$routeParams","$route","$location",function(t,e,n,o,r,s){t.singlePostView=!0,t.$on("$viewContentLoaded",function(){}),t.deleteItem=function(){n.removeItem({post_id:t.post._id}).success(function(t){console.log(t)})},t.prettifyCode=function(){PR.prettyPrint()};var a=o.slug,i=o.id;if(a){var u="";u+=o.year+"/",u+=o.month+"/",u+=o.day+"/",u+=o.slug,n.single_slug({slug:u}).success(function(e){t.post=e[0],console.log(t.post)})}else i&&n.single_id({id:i}).success(function(e){t.post=e[0],console.log(t.post)})}]),angular.module("app").controller("TagCtrl",["$scope","$http","UserSvc","PostsService","$routeParams","$route","$location",function(t,e,n,o,r,s,a){t.baseUrl=location.host;var i=r.tag;t["new"]={},t.tagTitle=i,o.filtered_posts({tags:i}).success(function(e){t.posts=e})}]),angular.module("app").service("UserSvc",["$http",function(t){var e=this;e.getUser=function(){return t.defaults.headers.common["X-Auth"]=window.localStorage.token,t.get("/api/users").then(function(t){return t})},e.login=function(n,o){return t.post("/api/sessions",{username:n,password:o}).then(function(n){return window.localStorage.token=n.data,t.defaults.headers.common["X-Auth"]=n.data,e.getUser()})},e.register=function(n,o,r){return t.post("/api/users",{username:n,password:o}).then(function(t){return e.login(n,o).then(function(){window.location.href="/"})})},e.authorization=function(e){return t.defaults.headers.common["X-Auth"]=window.localStorage.token,t.get("/api/users/permissions").then(function(t){return console.log(t),t.data>e?!0:!1})},e.logout=function(){window.localStorage.removeItem("token"),window.location.href="/"},e.profile=function(e){return t.get("/api/users/profile",{params:{username:e}})},e.profileUpdate=function(e){return t.post("/api/users/profile",e)}}]),angular.module("app").run(["$rootScope","$timeout","$window",function(t,e,n){var o=10;!function r(){o+=o;var s="ws://"+n.location.host,a=new WebSocket(s);a.onopen=function(){},a.onclose=function(t){console.log("Websocket connection closed. Attempting to recconnect in "+o+" seconds"),e(r,1e3*o)},a.onmessage=function(e){var n=JSON.parse(e.data),o="ws:"+n.topic,r=n.data;t.$broadcast(o,r)}}()}]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vZHVsZS5qcyIsImFwcGxpY2F0aW9uQ3RybC5qcyIsImN1c3RvbURpcmVjdGl2ZXMuanMiLCJsb2dpbkNydGwuanMiLCJwb3N0c0N0cmwuanMiLCJwb3N0c1NlcnZpY2UuanMiLCJwcm9maWxlQ3RybC5qcyIsInJlZ2lzdHJhdGlvbkN0cmwuanMiLCJyb3V0ZXMuanMiLCJzaW5nbGVQb3N0c0N0cmwuanMiLCJ0YWdDdHJsLmpzIiwidXNlclNlcnZpY2UuanMiLCJ3ZWJzb2NrZXRzLmpzIl0sIm5hbWVzIjpbImFuZ3VsYXIiLCJtb2R1bGUiLCJjb250cm9sbGVyIiwiJHNjb3BlIiwiJHJvb3RTY29wZSIsIlVzZXJTdmMiLCJiYXNlVXJsIiwibG9jYXRpb24iLCJob3N0Iiwid2luZG93IiwibG9jYWxTdG9yYWdlIiwidG9rZW4iLCJnZXRVc2VyIiwidGhlbiIsInJlc3BvbnNlIiwiJGVtaXQiLCJkYXRhIiwiJG9uIiwiZXZlbnQiLCJ1c2VyIiwiY3VycmVudFVzZXIiLCJsb2dvdXQiLCJmaWx0ZXIiLCIkc2NlIiwidmFsIiwidHJ1c3RBc0h0bWwiLCJpbnB1dCIsInN0YXJ0Iiwic2xpY2UiLCJkaXJlY3RpdmUiLCIkaHR0cCIsIiR0ZW1wbGF0ZUNhY2hlIiwiJGNvbXBpbGUiLCJzY29wZSIsImVsZW1lbnQiLCJhdHRycyIsInRlbXBsYXRlUGF0aCIsInN0YXRpY0luY2x1ZGUiLCJnZXQiLCJjYWNoZSIsInN1Y2Nlc3MiLCJjb250ZW50cyIsImh0bWwiLCIkdGltZW91dCIsImRlZiIsInJlc3RyaWN0IiwidGVybWluYWwiLCJ0cmFuc2NsdWRlIiwibGluayIsIiRldmFsIiwiYWZ0ZXJSZW5kZXIiLCJsb2dpbiIsInVzZXJuYW1lIiwicGFzc3dvcmQiLCJocmVmIiwiZXJyb3IiLCJsb2dpblZhbGlkYXRpb24iLCJQb3N0c1NlcnZpY2UiLCJmaWx0ZXJGaWx0ZXIiLCJib2R5TGVuZ3RoTGltaXQiLCJwb3N0VGFnc0FycmF5IiwiY2tMb2FkZWQiLCJwb3N0cyIsImFkZFBvc3QiLCJwb3N0Q29udGVudCIsIkNLRURJVE9SIiwiaW5zdGFuY2VzIiwiZWRpdG9yMSIsImdldERhdGEiLCJlcnIiLCJjb25zb2xlIiwiZGF0ZV9zbHVnIiwidXJsRGF0ZSIsInRpdGxlX3NsdWciLCJzbHVnaWZ5IiwicG9zdFRpdGxlIiwic2x1ZyIsInNlbmQiLCJib2R5IiwidGl0bGUiLCJ0YWdzIiwicG9zdCIsInBvc3RCb2R5Iiwic2V0RGF0YSIsImluaXRfY2tlZGl0b3IiLCJlZGl0b3JUZXh0QXJlYUV4aXN0cyIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJyZXBsYWNlIiwiYWxsb3dlZENvbnRlbnQiLCJfIiwiJGFwcGx5IiwidW5zaGlmdCIsInBhZ2luYXRlIiwiY3VycmVudFBhZ2UiLCJwb3N0c1BlclBhZ2UiLCJwcmV2UGFnZSIsIm5leHRQYWdlIiwibGVuZ3RoIiwic2V0UGFnZSIsInBhZ2VfbnVtYmVyIiwicmFuZ2UiLCJuIiwiQXJyYXkiLCIkd2F0Y2giLCJ0ZXJtIiwiZmlsdGVyZWRQb3N0cyIsIm51bWJlcl9vZl9pdGVtcyIsIm51bWJlck9mUGFnZXMiLCJNYXRoIiwiY2VpbCIsInRpbWUiLCJ1bmRlZmluZWQiLCJkYXRlIiwiRGF0ZSIsImRheSIsImdldERhdGUiLCJtb250aCIsImdldE1vbnRoIiwieWVhciIsImdldEZ1bGxZZWFyIiwiU3RyaW5nIiwiZ2VuZXJhdGVTbHVnIiwic3RyaW5nIiwidG9Mb3dlckNhc2UiLCJhZGRUYWciLCJ0YWciLCJwdXNoIiwicG9zdFRhZyIsInJlbW92ZVRhZyIsInRhZ0luZGV4Iiwic3BsaWNlIiwic2VydmljZSIsInRoaXMiLCJyZW1vdmVJdGVtIiwicGFyYW1ldGVycyIsInBhcmFtcyIsInBvc3RfaWQiLCJzaW5nbGVfc2x1ZyIsInBvc3Rfc2x1ZyIsInNpbmdsZV9pZCIsImlkIiwidXNlcl9wb3N0cyIsIl9hdXRob3IiLCJmaWx0ZXJlZF9wb3N0cyIsInNlYXJjaFBhcmFtcyIsIiRyb3V0ZVBhcmFtcyIsIiRyb3V0ZSIsIiRsb2NhdGlvbiIsImVkaXRQZXJtaXNzaW9uIiwicGVybWlzc2lvbl9sZXZlbCIsImF1dGhvcml6YXRpb24iLCJwcm9maWxlIiwidXNlcl9wcm9maWxlIiwiX2lkIiwiY2hlY2tMb2dpbiIsImNhbkVkaXQiLCJsb2ciLCJzYXZlUHJvZmlsZSIsInByb2ZpbGVfZGV0YWlscyIsImtleSIsImhhc093blByb3BlcnR5IiwicHJvZmlsZVVwZGF0ZSIsInJldHVybk1lc3NhZ2UiLCJzZXRUaW1lb3V0IiwicmVnaXN0ZXIiLCJwYXNzd29yZF9jb25maXJtIiwidmFsaWRhdGlvbk1lc3NhZ2UiLCJjb25maWciLCIkcm91dGVQcm92aWRlciIsIndoZW4iLCJ0ZW1wbGF0ZVVybCIsInNpbmdsZVBvc3RWaWV3IiwiZGVsZXRlSXRlbSIsInByZXR0aWZ5Q29kZSIsIlBSIiwicHJldHR5UHJpbnQiLCJwb3N0U2x1ZyIsInBvc3RJRCIsImZ1bGxQb3N0U2x1ZyIsInRhZ1RpdGxlIiwidGFnZ2VkUG9zdHMiLCJzdmMiLCJkZWZhdWx0cyIsImhlYWRlcnMiLCJjb21tb24iLCJydW4iLCIkd2luZG93IiwicmVjb25uZWN0X2RlbGF5IiwiY29ubmVjdCIsImNvbm5lY3Rpb24iLCJXZWJTb2NrZXQiLCJvbm9wZW4iLCJvbmNsb3NlIiwiZSIsIm9ubWVzc2FnZSIsIm1lc3NhZ2UiLCJKU09OIiwicGFyc2UiLCJuYW1lIiwidG9waWMiLCIkYnJvYWRjYXN0Il0sIm1hcHBpbmdzIjoiQUFDQUEsUUFBQUMsT0FBQSxPQUFBLFVBQUEsY0NEQUQsUUFBQUMsT0FBQSxPQUNBQyxXQUFBLG1CQUFBLFNBQUEsYUFBQSxVQUFBLFNBQUFDLEVBQUFDLEVBQUFDLEdBTUFGLEVBQUFHLFFBQUFDLFNBQUFDLEtBR0FDLE9BQUFDLGFBQUFDLE9BQ0FOLEVBQUFPLFVBQ0FDLEtBQUEsU0FBQUMsR0FDQVgsRUFBQVksTUFBQSxlQUFBRCxFQUFBRSxRQUlBYixFQUFBYyxJQUFBLGVBQUEsU0FBQUMsRUFBQUMsR0FDQWhCLEVBQUFpQixZQUFBRCxJ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QUFBLE9BQ0F5TCxLQUFBLGFBQUEsV0FBQSxVQUFBLFNBQUF0TCxFQUFBdUMsRUFBQWdKLEdBRUEsR0FBQUMsR0FBQSxJQUVBLFFBQUFDLEtBRUFELEdBQUFBLENBR0EsSUFBQXBMLEdBQUEsUUFBQW1MLEVBQUFwTCxTQUFBQyxLQUVBc0wsRUFBQSxHQUFBQyxXQUFBdkwsRUFFQXNMLEdBQUFFLE9BQUEsYUFLQUYsRUFBQUcsUUFBQSxTQUFBQyxHQUNBNUgsUUFBQXVGLElBQUEsNERBQUErQixFQUFBLFlBRUFqSixFQUFBa0osRUFBQSxJQUFBRCxJQUdBRSxFQUFBSyxVQUFBLFNBQUFELEdBRUEsR0FBQUUsR0FBQUMsS0FBQUMsTUFBQUosRUFBQWxMLE1BRUF1TCxFQUFBLE1BQUFILEVBQUFJLE1BQ0F4TCxFQUFBb0wsRUFBQXBMLElBR0FaLEdBQUFxTSxXQUFBRixFQUFBdkwiLCJmaWxlIjoiYXBwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy9UaGlzIGZpbGUgbXVzdCBiZSB0aGUgZmlyc3QgaW4gdGhlIGxpc3QgdG8gYmUgY29uY2F0ZW5hdGVkXG5hbmd1bGFyLm1vZHVsZSgnYXBwJywgWyduZ1JvdXRlJywgJ25nQW5pbWF0ZSddKSIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxuXHQuY29udHJvbGxlcignQXBwbGljYXRpb25DdHJsJyAsIFtcIiRzY29wZVwiLCBcIiRyb290U2NvcGVcIiwgXCJVc2VyU3ZjXCIsIGZ1bmN0aW9uICgkc2NvcGUsICRyb290U2NvcGUsIFVzZXJTdmMpIHtcblx0XHQvKlxuXHRcdElmIHdlIGhhdmUgYSBzdG9yZWQgdG9rZW4sIGdldCB0aGUgdXNlciBpbmZvcm1hdGlvbiBmcm9tIGl0XG5cdFx0YW5kIGVtaXQgdGhlIHVzZXIgbG9nZ2VkaW4gbWVzc2FnZXMgaW4gb3JkZXIgdG8gYWxsb3cgdGhlIFVJIHRvIFxuXHRcdGluZGljYXRlIHRvIHRoZSB1c2VyIHRoYXQgdGhleSB3ZXJlIGxvZ2dlZCBpblxuXHRcdCovXG5cdFx0JHNjb3BlLmJhc2VVcmwgPSBsb2NhdGlvbi5ob3N0O1xuXG5cdFx0XG5cdFx0aWYgKHdpbmRvdy5sb2NhbFN0b3JhZ2UudG9rZW4pIHtcblx0XHRcdFVzZXJTdmMuZ2V0VXNlcigpXG5cdFx0XHRcdC50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSl7XG5cdFx0XHRcdFx0JHNjb3BlLiRlbWl0KCd1c2VyTG9nZ2VkSW4nLCByZXNwb25zZS5kYXRhKTtcblx0XHRcdFx0fSlcblx0XHR9XG5cblx0XHQkc2NvcGUuJG9uKCd1c2VyTG9nZ2VkSW4nLCBmdW5jdGlvbihldmVudCwgdXNlcikge1xuXHRcdFx0JHNjb3BlLmN1cnJlbnRVc2VyID0gdXNlcjtcblx0XHR9KVxuXG5cdFx0JHNjb3BlLmxvZ291dCA9IGZ1bmN0aW9uICgpIHtcblx0XHRcdFVzZXJTdmMubG9nb3V0KCk7XG5cdFx0fVxuXHR9XSlcblxuXHQuZmlsdGVyKCdvdXRwdXRfaHRtbCcsIFtcIiRzY2VcIiwgZnVuY3Rpb24gKCRzY2UpIHtcblx0XHRyZXR1cm4gZnVuY3Rpb24odmFsKSB7XG5cdCAgICAgICAgcmV0dXJuICRzY2UudHJ1c3RBc0h0bWwodmFsKTtcblx0ICAgIH07XG5cdH1dKVxuXG5cdC5maWx0ZXIoJ3N0YXJ0RnJvbScsIGZ1bmN0aW9uKCkge1xuXHQgICAgcmV0dXJuIGZ1bmN0aW9uKGlucHV0LCBzdGFydCkge1xuXHQgICAgICAgIGlmKGlucHV0KSB7XG5cdCAgICAgICAgICAgIHN0YXJ0ID0gK3N0YXJ0OyAvL3BhcnNlIHRvIGludFxuXHQgICAgICAgICAgICByZXR1cm4gaW5wdXQuc2xpY2Uoc3RhcnQpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICByZXR1cm4gW107XG5cdCAgICB9XG5cdH0pOyIsIi8qKlxuICogQ3JlYXRlZCBieSB0b21pIG9uIDE5LzAxLzE2LlxuICovXG5hbmd1bGFyLm1vZHVsZSgnYXBwJylcbiAgICAuZGlyZWN0aXZlKCdzdGF0aWNJbmNsdWRlJywgWyckaHR0cCcsICckdGVtcGxhdGVDYWNoZScsICckY29tcGlsZScsIGZ1bmN0aW9uICgkaHR0cCwgJHRlbXBsYXRlQ2FjaGUsICRjb21waWxlKSB7XG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHJzKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRlbXBsYXRlUGF0aCA9IGF0dHJzLnN0YXRpY0luY2x1ZGU7XG4gICAgICAgICAgICAgICAgJGh0dHAuZ2V0KHRlbXBsYXRlUGF0aCwgeyBjYWNoZTogJHRlbXBsYXRlQ2FjaGUgfSkuc3VjY2VzcyhmdW5jdGlvbihyZXNwb25zZSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgY29udGVudHMgPSBlbGVtZW50Lmh0bWwocmVzcG9uc2UpLmNvbnRlbnRzKCk7XG4gICAgICAgICAgICAgICAgICAgICRjb21waWxlKGNvbnRlbnRzKShzY29wZSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9O1xuICAgIH1dKVxuICAgIC5kaXJlY3RpdmUoJ2FmdGVyUmVuZGVyJywgWyckdGltZW91dCcsIGZ1bmN0aW9uICgkdGltZW91dCkge1xuICAgICAgICB2YXIgZGVmID0ge1xuICAgICAgICAgICAgcmVzdHJpY3Q6ICdBJyxcbiAgICAgICAgICAgIHRlcm1pbmFsOiB0cnVlLFxuICAgICAgICAgICAgdHJhbnNjbHVkZTogZmFsc2UsXG4gICAgICAgICAgICBsaW5rOiBmdW5jdGlvbiAoc2NvcGUsIGVsZW1lbnQsIGF0dHJzKSB7XG4gICAgICAgICAgICAgICAgJHRpbWVvdXQoc2NvcGUuJGV2YWwoYXR0cnMuYWZ0ZXJSZW5kZXIpLCAwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIGRlZjtcbiAgICAgICAgLy9odHRwOi8vZ3NmZXJyZWlyYS5jb20vYXJjaGl2ZS8yMDE1LzAzL2FuZ3VsYXJqcy1hZnRlci1yZW5kZXItZGlyZWN0aXZlL1xuICAgIH1dKSIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxuXHQuY29udHJvbGxlcignTG9naW5DdHJsJyAsIFtcIiRzY29wZVwiICwgXCJVc2VyU3ZjXCIgLCBmdW5jdGlvbiAoJHNjb3BlLCBVc2VyU3ZjKSB7XG5cdFx0JHNjb3BlLmxvZ2luID0gZnVuY3Rpb24gKHVzZXJuYW1lLCBwYXNzd29yZCkge1xuXHRcdFx0VXNlclN2Yy5sb2dpbih1c2VybmFtZSwgcGFzc3dvcmQpXG5cdFx0XHRcdC50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSl7XG5cdFx0XHRcdFx0JHNjb3BlLiRlbWl0KCd1c2VyTG9nZ2VkSW4nLCByZXNwb25zZS5kYXRhKTtcblx0XHRcdFx0XHR3aW5kb3cubG9jYXRpb24uaHJlZiA9ICcjLydcblx0XHRcdFx0fSxcblx0XHRcdFx0ZnVuY3Rpb24oZXJyb3Ipe1xuXHRcdFx0XHQgICRzY29wZS5sb2dpblZhbGlkYXRpb24gPSAnSW5jb3JyZWN0IHVzZXJuYW1lICYgcGFzc3dvcmQgY29tYmluYXRpb24nO1xuXHRcdFx0XHR9KVxuXG5cdFx0fVxuXG5cdFx0JHNjb3BlLmxvZ291dCA9IGZ1bmN0aW9uICgpIHtcblx0XHRcdFVzZXJTdmMubG9nb3V0KClcblx0XHR9XG5cdH1dKSIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxuXHQuY29udHJvbGxlcignUG9zdHNDdHJsJywgW1wiJHNjb3BlXCIgLCBcIiRodHRwXCIsIFwiUG9zdHNTZXJ2aWNlXCIsIFwiZmlsdGVyRmlsdGVyXCIsIFwiVXNlclN2Y1wiLCBcIiR0aW1lb3V0XCIsIGZ1bmN0aW9uICgkc2NvcGUsICRodHRwLCBQb3N0c1NlcnZpY2UsIGZpbHRlckZpbHRlciwgVXNlclN2YywgJHRpbWVvdXQpIHtcblx0XHQkc2NvcGUuYmFzZVVybCA9IGxvY2F0aW9uLmhvc3Q7XG5cdFx0JHNjb3BlLmJvZHlMZW5ndGhMaW1pdCA9IDI1MDtcblx0XHQkc2NvcGUucG9zdFRhZ3NBcnJheSA9IFtdO1xuXHRcdCRzY29wZS5ja0xvYWRlZCA9IGZhbHNlO1xuXG5cdFx0JHNjb3BlLnBvc3RzID0gW107XG5cdFx0JHNjb3BlLmFkZFBvc3QgPSBmdW5jdGlvbiAoKSB7XG5cdFx0XHR0cnkge1xuXHRcdFx0XHR2YXIgcG9zdENvbnRlbnQgPSBDS0VESVRPUi5pbnN0YW5jZXMuZWRpdG9yMS5nZXREYXRhKCk7XG5cdFx0XHR9XG5cdFx0XHRjYXRjaChlcnIpIHtcblx0XHRcdFx0Ly8gY2tlZGl0b3IgaXMgbm90IGxvYWRlZFxuXHRcdFx0XHRjb25zb2xlLmVycm9yKFwiQ0tFRElUT1IgaGFzIG5vdCBiZWVuIGxvYWRlZFwiKTtcblx0XHRcdH1cblx0XHRcdGlmICghcG9zdENvbnRlbnQpIHtcblx0XHRcdFx0dmFyIHBvc3RDb250ZW50ID0gJHNjb3BlLnBvc3RDb250ZW50O1xuXHRcdFx0fVxuXG5cdFx0XHR2YXIgZGF0ZV9zbHVnID0gJHNjb3BlLnVybERhdGUoKTtcblx0XHRcdHZhciB0aXRsZV9zbHVnID0gJHNjb3BlLnNsdWdpZnkoJHNjb3BlLnBvc3RUaXRsZSk7XG5cblx0XHRcdHZhciBzbHVnID0gZGF0ZV9zbHVnICsgdGl0bGVfc2x1ZztcblxuXHRcdFx0aWYgKHBvc3RDb250ZW50KSB7XG5cdFx0XHRcdFBvc3RzU2VydmljZS5zZW5kKHtcblx0XHRcdFx0XHRib2R5OiBwb3N0Q29udGVudCxcblx0XHRcdFx0XHR0aXRsZTogJHNjb3BlLnBvc3RUaXRsZSxcblx0XHRcdFx0XHR0YWdzOiAkc2NvcGUucG9zdFRhZ3NBcnJheSxcblx0XHRcdFx0XHRzbHVnOiBzbHVnXG5cdFx0XHRcdH0pXG5cdFx0XHRcdC5zdWNjZXNzKGZ1bmN0aW9uIChwb3N0KSB7XG5cdFx0XHRcdFx0Lypcblx0XHRcdFx0XHQvL1JlbW92ZWQgYXMgd2Vic29ja2V0IGJyb2FkY2FzdCB3b3VsZCBjYXVzZSB0aGUgcG9zdCB0byBhcHBlYXIgZHVwbGljYXRlZCBvbiB0aGUgYnJvd3NlciB0aGF0IGl0IHdhcyBwb3N0ZWQgZnJvbSBcblx0XHRcdFx0XHQvL2FzIGJvdGggb2YgdGhlIGZ1bmN0aW9ucyB3b3VsZCBnZXQgZXhlY3V0ZWQgYmVjYXVzZSB0aGUgY2xpZW50IHdobyBzZW5kcyB0aGUgcG9zdCB3b3VsZCBzdGlsbCByZWNpZXZlIHRoZSB3ZWJzb2NrZXRzIGJyb2FkY2FzdCBiYWNrIGZyb20gdGhlIHNlcnZlciAgXG5cdFx0XHRcdFx0Ki9cblx0XHRcdFx0XHQkc2NvcGUucG9zdEJvZHkgPSBudWxsO1xuXHRcdFx0XHRcdENLRURJVE9SLmluc3RhbmNlcy5lZGl0b3IxLnNldERhdGEoJycpO1xuXHRcdFx0XHRcdCRzY29wZS5wb3N0VGl0bGUgPSBudWxsO1xuXHRcdFx0XHR9KVxuXHRcdFx0fVxuXHRcdH07XG5cblx0XHQkc2NvcGUuJG9uKCckaW5jbHVkZUNvbnRlbnRMb2FkZWQnLCBmdW5jdGlvbiAoKSB7XG5cdFx0XHQkc2NvcGUuaW5pdF9ja2VkaXRvcigpO1xuXHRcdH0pO1xuXG5cdFx0JHNjb3BlLmluaXRfY2tlZGl0b3IgPSBmdW5jdGlvbiAoKSB7XG5cdFx0XHR2YXIgZWRpdG9yVGV4dEFyZWFFeGlzdHMgPSAhIWRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiZWRpdG9yMVwiKTtcblxuXHRcdFx0JHNjb3BlLmNrTG9hZGVkID0gdHJ1ZTtcblxuXHRcdFx0aWYgKGVkaXRvclRleHRBcmVhRXhpc3RzKSB7XG5cdFx0XHRcdHZhciBlZGl0b3IgPSBDS0VESVRPUi5yZXBsYWNlKCdlZGl0b3IxJywge1xuXHRcdFx0XHRcdGFsbG93ZWRDb250ZW50IDogdHJ1ZVxuXHRcdFx0fSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHQkc2NvcGUuY2tMb2FkZWQgPSBmYWxzZTtcblx0XHRcdH1cblx0XHR9O1xuXG5cdFx0JHNjb3BlLiRvbignd3M6bmV3X3Bvc3QnLCBmdW5jdGlvbihfLCBwb3N0KSB7XG5cdFx0XHRwb3N0ID0gcG9zdFswXTtcblx0XHRcdCRzY29wZS4kYXBwbHkoZnVuY3Rpb24gKCkge1xuXHRcdFx0XHQkc2NvcGUucG9zdHMudW5zaGlmdChwb3N0KTtcblx0XHRcdFx0JHNjb3BlLnBhZ2luYXRlKCk7XG5cdFx0XHR9KVxuXHRcdH0pO1xuXG5cdFx0JHNjb3BlLiRvbignJHZpZXdDb250ZW50TG9hZGVkJywgZnVuY3Rpb24oKXtcblx0XHRcdC8vdGhlIHBhZ2UgaXMgcmVhZHlcblx0XHR9KTtcblxuXHRcdCRzY29wZS5jdXJyZW50UGFnZSA9IDE7XG5cdFx0JHNjb3BlLnBvc3RzUGVyUGFnZSA9IDU7XG5cblx0XHQkc2NvcGUucHJldlBhZ2UgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgaWYgKCRzY29wZS5jdXJyZW50UGFnZSA+IDEpIHtcblx0ICAgICAgICAgICAgJHNjb3BlLmN1cnJlbnRQYWdlLS07XG5cdCAgICAgICAgfVxuXHQgICAgfTtcbiAgICBcblx0ICAgICRzY29wZS5uZXh0UGFnZSA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICBpZiAoJHNjb3BlLmN1cnJlbnRQYWdlIDwgJHNjb3BlLnBvc3RzLmxlbmd0aC8kc2NvcGUucG9zdHNQZXJQYWdlKSB7XG5cdCAgICAgICAgICAgICRzY29wZS5jdXJyZW50UGFnZSsrO1xuXHQgICAgICAgIH1cblx0ICAgIH07XG5cdCAgICBcblx0ICAgICRzY29wZS5zZXRQYWdlID0gZnVuY3Rpb24gKHBhZ2VfbnVtYmVyKSB7XG5cdCAgICAgICAgJHNjb3BlLmN1cnJlbnRQYWdlID0gcGFnZV9udW1iZXI7XG5cdCAgICB9O1xuXG5cdCAgICAvL1RoaXMgd2F5IEkgY2FuIGRvOiAgXCI8bGkgbmctcmVwZWF0PVwibiBpbiByYW5nZShwYWdlcykgdHJhY2sgYnkgJGluZGV4XCI+XCIgYW5kIHNvIEkgY2FuIGRpc3BsYXkgYXMgbWFueSBpdGVtcyBhcyB0aGUgdmFsdWUgb2YgYSBudW1iZXIgYXMgdGhpcyByZXR1cm5zIGFuIGFycmF5IG9mIHRoYXQgbGVuZ2h0XG5cdCAgICAkc2NvcGUucmFuZ2UgPSBmdW5jdGlvbihuKSB7XG4gICAgICAgIFx0cmV0dXJuIG5ldyBBcnJheShuKTtcbiAgICBcdH07XG5cdCAgICBcblx0ICAgIC8vd2F0Y2ggdG8gc2VlIGlmIHNlYXJjaGluZyBhbmQgcmVwYWdpbmF0ZSBpZiB3ZSBhcmVcblx0ICAgIC8vdHJ1ZSBhdCB0aGUgZW5kICBtYWdpY2FsbHkgbWFrZXMgaXQgc28gdGhhdCBhcyBlYWNoIGV4dHJhIGxldHRlciBpcyBhZGRlZCB0byB0aGUgc2VhcmNoIHdlIGNhbiByZXBhZ2luYXRlXG5cdCAgICAvL3dpdGhvdXQgdGhlICd0cnVlJyBpdCBvbmx5IGRpZCAgdGhhdFxuXHQgICAgJHNjb3BlLiR3YXRjaCgnc2VhcmNoJywgZnVuY3Rpb24odGVybSkge1xuXHQgICAgICAgICRzY29wZS5maWx0ZXJlZFBvc3RzID0gZmlsdGVyRmlsdGVyKCRzY29wZS5wb3N0cywgdGVybSk7XG5cdCAgICAgICAgJHNjb3BlLnBhZ2luYXRlKCRzY29wZS5maWx0ZXJlZFBvc3RzLmxlbmd0aCk7XG5cdCAgICB9LCB0cnVlKTtcblxuXG5cdCAgICAkc2NvcGUucGFnaW5hdGUgPSBmdW5jdGlvbihudW1iZXJfb2ZfaXRlbXMpe1xuXHQgICAgXHRpZiAobnVtYmVyX29mX2l0ZW1zID4gMCkge1xuXHQgICAgICAgIFx0JHNjb3BlLm51bWJlck9mUGFnZXMgPSBNYXRoLmNlaWwobnVtYmVyX29mX2l0ZW1zLyRzY29wZS5wb3N0c1BlclBhZ2UpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBlbHNlIHtcblx0ICAgICAgICBcdCRzY29wZS5udW1iZXJPZlBhZ2VzID0gTWF0aC5jZWlsKCRzY29wZS5wb3N0cy5sZW5ndGgvJHNjb3BlLnBvc3RzUGVyUGFnZSk7XG5cdCAgICAgICAgfVxuXHQgICAgfTtcblxuXHQgICAgJHNjb3BlLnVybERhdGUgPSBmdW5jdGlvbih0aW1lKSB7XG5cdFx0XHRpZiAodGltZSA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdHZhciBkYXRlID0gbmV3IERhdGUoKTtcblx0XHRcdH1cblx0XHRcdGVsc2Uge1xuXHRcdFx0XHR2YXIgZGF0ZSA9IG5ldyBEYXRlKHRpbWUpO1xuXHRcdFx0fVxuXHRcdCAgICB2YXIgZGF5ID0gZGF0ZS5nZXREYXRlKCk7XG5cdFx0ICAgIHZhciBtb250aCA9IGRhdGUuZ2V0TW9udGgoKSsxOyAvLysxIGJlY2F1c2UgbW9udGhzIGFyZSAwIGluZGV4ZWRcblx0XHQgICAgdmFyIHllYXIgPSBkYXRlLmdldEZ1bGxZZWFyKCk7XG5cbiAgICAgICAgICAgIHJldHVybiBTdHJpbmcoeWVhcikgKyAnLycgKyBTdHJpbmcobW9udGgpICsgJy8nICsgU3RyaW5nKGRheSkgKyAnLycgO1xuICAgICAgICB9O1xuXG5cdFx0JHNjb3BlLiR3YXRjaCgncG9zdFRpdGxlJywgZnVuY3Rpb24odGl0bGUpIHtcblx0XHRcdGlmICh0aXRsZSkge1xuXHRcdFx0XHQkc2NvcGUuZ2VuZXJhdGVTbHVnKHRpdGxlKTtcblx0XHRcdH1cblx0XHR9LCB0cnVlKTtcblxuXHRcdCRzY29wZS5nZW5lcmF0ZVNsdWcgPSBmdW5jdGlvbiAoKSB7XG5cdFx0XHQkc2NvcGUuc2x1ZyA9ICRzY29wZS51cmxEYXRlKCkgKyAkc2NvcGUuc2x1Z2lmeSgkc2NvcGUucG9zdFRpdGxlKTtcblx0XHR9O1xuXG5cdCAgICAkc2NvcGUuc2x1Z2lmeSA9IGZ1bmN0aW9uKHN0cmluZykge1xuXHQgICAgXHR2YXIgc2x1ZyA9ICBzdHJpbmcudG9Mb3dlckNhc2UoKTtcblx0ICAgIFx0c2x1ZyA9IHNsdWcucmVwbGFjZSgvXFxzKy9nLFwiLVwiKTtcblx0ICAgIFx0c2x1ZyA9IHNsdWcucmVwbGFjZSgvXFw/L2csIFwiXCIpO1xuXHQgICAgXHRzbHVnID0gc2x1Zy5yZXBsYWNlKC9cXCYvZywgXCJcIik7XG5cdCAgICBcdHNsdWcgPSBzbHVnLnJlcGxhY2UoL1xcPS9nLCBcIlwiKTtcblx0ICAgIFx0cmV0dXJuIHNsdWc7XG5cdCAgICB9O1xuXG5cdFx0JHNjb3BlLmFkZFRhZyA9IGZ1bmN0aW9uKHRhZykge1xuXHRcdFx0Ly9jb25zb2xlLmxvZyh0YWcpO1xuXHRcdFx0JHNjb3BlLnBvc3RUYWdzQXJyYXkucHVzaCh0YWcpO1xuXHRcdFx0JHNjb3BlLnBvc3RUYWcgPSAnJztcblx0XHR9O1xuXG5cdFx0JHNjb3BlLnJlbW92ZVRhZyA9IGZ1bmN0aW9uKHRhZ0luZGV4KSB7XG5cdFx0XHQkc2NvcGUucG9zdFRhZ3NBcnJheS5zcGxpY2UodGFnSW5kZXgsIDEpO1xuXHRcdH07XG5cblx0UG9zdHNTZXJ2aWNlLmdldCgpXG5cdFx0LnN1Y2Nlc3MoZnVuY3Rpb24gKHBvc3RzKSB7XG5cdFx0XHQkc2NvcGUucG9zdHMgPSBwb3N0cztcblx0XHRcdC8vY29uc29sZS5sb2cocG9zdHMpOyAvL0xvZyBhbGwgdGhlIHBvc3RzIHJlY2lldmVkIGZyb20gdGhlIHNlcnZlclxuXHRcdFx0JHNjb3BlLnBhZ2luYXRlKCRzY29wZS5wb3N0cy5sZW5ndGgpO1xuXHRcdH0pXG5cblx0fV0pIiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpXG5cdC5zZXJ2aWNlKCdQb3N0c1NlcnZpY2UnLCBbXCIkaHR0cFwiICwgZnVuY3Rpb24gKCRodHRwKSB7XG5cdFx0dGhpcy5nZXQgPSBmdW5jdGlvbiAoKSB7XG5cdFx0XHRyZXR1cm4gJGh0dHAuZ2V0KCcvYXBpL3Bvc3RzJyk7XG5cdFx0fVxuXHRcdHRoaXMuc2VuZCA9IGZ1bmN0aW9uIChwb3N0KSB7XG5cdFx0XHRyZXR1cm4gJGh0dHAucG9zdCgnL2FwaS9wb3N0cycsIHBvc3QpO1xuXHRcdH1cblx0XHR0aGlzLnJlbW92ZUl0ZW0gPSBmdW5jdGlvbiAocGFyYW1ldGVycykge1xuXHRcdFx0cmV0dXJuICRodHRwLnBvc3QoJy9hcGkvcG9zdHMvcmVtb3ZlSXRlbScsIHsgcGFyYW1zOiB7cG9zdF9pZDogcGFyYW1ldGVycy5wb3N0X2lkfSB9KTtcblx0XHR9XG5cdFx0dGhpcy5zaW5nbGVfc2x1ZyA9IGZ1bmN0aW9uIChwYXJhbWV0ZXJzKSB7XG5cdFx0XHRyZXR1cm4gJGh0dHAuZ2V0KCcvYXBpL3Bvc3RzJywgeyBwYXJhbXM6IHtwb3N0X3NsdWc6IHBhcmFtZXRlcnMuc2x1Z30gfSApO1xuXHRcdH1cblx0XHR0aGlzLnNpbmdsZV9pZCA9IGZ1bmN0aW9uIChwYXJhbWV0ZXJzKSB7XG5cdFx0XHRyZXR1cm4gJGh0dHAuZ2V0KCcvYXBpL3Bvc3RzJywgeyBwYXJhbXM6IHtwb3N0X2lkOiBwYXJhbWV0ZXJzLmlkfSB9ICk7XG5cdFx0fVxuXHRcdHRoaXMudXNlcl9wb3N0cyA9IGZ1bmN0aW9uIChwYXJhbWV0ZXJzKSB7XG5cdFx0XHRyZXR1cm4gJGh0dHAuZ2V0KCcvYXBpL3Bvc3RzJywgeyBwYXJhbXM6IHtfYXV0aG9yOiBwYXJhbWV0ZXJzLl9hdXRob3J9IH0gKTtcblx0XHR9XG5cdFx0dGhpcy5maWx0ZXJlZF9wb3N0cyA9IGZ1bmN0aW9uIChzZWFyY2hQYXJhbXMpIHtcblx0XHRcdHJldHVybiAkaHR0cC5nZXQoJy9hcGkvcG9zdHMnLCB7IHBhcmFtczogc2VhcmNoUGFyYW1zIH0gKTtcblx0XHR9XG5cdH1dKSIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxuXHQuY29udHJvbGxlcignUHJvZmlsZUN0cmwnLCBbXCIkc2NvcGVcIiAsIFwiJGh0dHBcIiwgXCJVc2VyU3ZjXCIsIFwiUG9zdHNTZXJ2aWNlXCIgLCBcIiRyb3V0ZVBhcmFtc1wiLCBcIiRyb3V0ZVwiLCBcIiRsb2NhdGlvblwiICwgZnVuY3Rpb24gKCRzY29wZSwgJGh0dHAsIFVzZXJTdmMsIFBvc3RzU2VydmljZSwgJHJvdXRlUGFyYW1zLCAkcm91dGUsICRsb2NhdGlvbikge1xuXG5cblx0XHQvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblx0XHQvIEdldCB1c2VyIHBlcm1pc3Npb25zXG5cdFx0Ly0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXHRcdCRzY29wZS5lZGl0UGVybWlzc2lvbiA9IGZ1bmN0aW9uKHBlcm1pc3Npb25fbGV2ZWwpIHtcblx0XHQgIFx0VXNlclN2Yy5hdXRob3JpemF0aW9uKClcblx0XHRcdFx0LnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKXtcblx0XHRcdFx0XHQkc2NvcGU9KHJlc3BvbnNlKTtcblx0XHRcdFx0fSlcblx0XHR9XG5cdFx0LyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cdFx0LyBFbmQgdXNlciBwZXJtaXNzaW9uc1xuXHRcdC8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuXG5cdFx0JHNjb3BlLmJhc2VVcmwgPSBsb2NhdGlvbi5ob3N0O1xuXHRcdHZhciB1c2VybmFtZSA9ICRyb3V0ZVBhcmFtcy51c2VybmFtZTtcblx0XHQkc2NvcGUubmV3ICA9IHt9O1xuXG5cdFx0VXNlclN2Yy5wcm9maWxlKHVzZXJuYW1lKVxuXHRcdFx0LnN1Y2Nlc3MoZnVuY3Rpb24gKHVzZXJfcHJvZmlsZSkge1xuXHRcdFx0XHQkc2NvcGUudXNlcl9wcm9maWxlID0gdXNlcl9wcm9maWxlO1xuXHRcdFx0XHRQb3N0c1NlcnZpY2UudXNlcl9wb3N0cyAoe1xuXHRcdFx0XHRcdF9hdXRob3I6ICRzY29wZS51c2VyX3Byb2ZpbGUuX2lkXG5cdFx0XHRcdH0pXG5cdFx0XHRcdFx0LnN1Y2Nlc3MoZnVuY3Rpb24gKHVzZXJfcG9zdHMpIHtcblx0XHRcdFx0XHRcdCRzY29wZS51c2VyX3Bvc3RzID0gdXNlcl9wb3N0cztcblx0XHRcdFx0XHRcdCRzY29wZS5wYWdpbmF0ZSgkc2NvcGUudXNlcl9wb3N0cy5sZW5ndGgpO1xuXHRcdFx0XHRcdH0pXG5cdFx0XHR9KVxuXG5cdFx0LyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cdFx0LyBDaGVjayBjdXJyZW50bHkgbG9nZ2VkIGluIHVzZXIgXG5cdFx0Ly0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cblx0XHQkc2NvcGUuY2hlY2tMb2dpbiA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0Ly9pcyBhbnlvbmUgbG9nZ2VkIGluXG5cdFx0ICBcdGlmICh3aW5kb3cubG9jYWxTdG9yYWdlLnRva2VuKSB7XG5cdFx0XHQgIFx0Ly9nZXQgY3VycmVudCB1c2VyXG5cdFx0XHQgIFx0VXNlclN2Yy5nZXRVc2VyKClcblx0XHRcdFx0XHQudGhlbihmdW5jdGlvbiAocmVzcG9uc2Upe1xuXHRcdFx0XHRcdFx0JHNjb3BlLmN1cnJlbnRVc2VyID0gcmVzcG9uc2UuZGF0YTtcblx0XHRcdFx0XHRcdFx0Ly9pcyB0aGUgdXNlciB0aGUgc2FtZSBhcyB0aGUgdXNlciB3aG8ncyBwYWdlIHRoaXMgaXMgb3IgdGhleSBoYXZlIGEgaGlnaGVyIHBlcm1pc3Npb24gbGV2ZWwgdGhlbiBsZXQgdGhlbSBlZGl0IHRoZSBwYWdlXG5cdFx0XHRcdFx0XHRcdGlmICgkc2NvcGUudXNlcl9wcm9maWxlLl9pZCA9PSAkc2NvcGUuY3VycmVudFVzZXIuX2lkIHx8ICRzY29wZS5lZGl0UGVybWlzc2lvbigkc2NvcGUuY3VycmVudFVzZXIucGVybWlzc2lvbl9sZXZlbCkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0JHNjb3BlLmNhbkVkaXQgPSB0cnVlO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSlcblx0XHRcdH1cblx0XHR9O1xuXG5cdFx0LyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cdFx0LyBFbmQgdXNlciBjaGVjayBcblx0XHQvLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuXHRcdCRzY29wZS5jdXJyZW50VXNlciA9IFtdO1xuXG5cdFx0JHNjb3BlLmNoZWNrTG9naW4oKTtcblxuXHRcdCRzY29wZS4kb24oJyR2aWV3Q29udGVudExvYWRlZCcsIGZ1bmN0aW9uKCl7XG5cdFx0XHQvL3RoZSBwYWdlIGlzIHJlYWR5XG5cdFx0fSk7XG5cblx0XHQvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblx0XHQvIFBhZ2luYXRpb24gXG5cdFx0Ly0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cblx0XHQkc2NvcGUudXNlcl9wb3N0cyA9IFtdO1xuXG5cdFx0JHNjb3BlLmN1cnJlbnRQYWdlID0gMTtcblx0XHQkc2NvcGUucG9zdHNQZXJQYWdlID0gNTtcblxuXHRcdCRzY29wZS5wcmV2UGFnZSA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICBpZiAoJHNjb3BlLmN1cnJlbnRQYWdlID4gMSkge1xuXHQgICAgICAgICAgICAkc2NvcGUuY3VycmVudFBhZ2UtLTtcblx0ICAgICAgICB9XG5cdCAgICB9O1xuICAgIFxuXHQgICAgJHNjb3BlLm5leHRQYWdlID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIGlmICgkc2NvcGUuY3VycmVudFBhZ2UgPCAkc2NvcGUudXNlcl9wb3N0cy5sZW5ndGgvJHNjb3BlLnBvc3RzUGVyUGFnZSkge1xuXHQgICAgICAgICAgICAkc2NvcGUuY3VycmVudFBhZ2UrKztcblx0ICAgICAgICB9XG5cdCAgICB9O1xuXHQgICAgXG5cdCAgICAkc2NvcGUuc2V0UGFnZSA9IGZ1bmN0aW9uIChwYWdlX251bWJlcikge1xuXHQgICAgICAgICRzY29wZS5jdXJyZW50UGFnZSA9IHBhZ2VfbnVtYmVyO1xuXHQgICAgfTtcblxuXHQgICAgLy9UaGlzIHdheSBJIGNhbiBkbzogIFwiPGxpIG5nLXJlcGVhdD1cIm4gaW4gcmFuZ2UocGFnZXMpIHRyYWNrIGJ5ICRpbmRleFwiPlwiIGFuZCBzbyBJIGNhbiBkaXNwbGF5IGFzIG1hbnkgaXRlbXMgYXMgdGhlIHZhbHVlIG9mIGEgbnVtYmVyIGFzIHRoaXMgcmV0dXJucyBhbiBhcnJheSBvZiB0aGF0IGxlbmdodFxuXHQgICAgJHNjb3BlLnJhbmdlID0gZnVuY3Rpb24obikge1xuICAgICAgICBcdHJldHVybiBuZXcgQXJyYXkobik7XG4gICAgXHR9O1xuXHQgICAgXG5cblx0XHQkc2NvcGUucGFnaW5hdGUgPSBmdW5jdGlvbihudW1iZXJfb2ZfaXRlbXMpe1xuXHQgICAgXHRpZiAobnVtYmVyX29mX2l0ZW1zID4gMCkge1xuXHQgICAgICAgIFx0JHNjb3BlLm51bWJlck9mUGFnZXMgPSBNYXRoLmNlaWwobnVtYmVyX29mX2l0ZW1zLyRzY29wZS5wb3N0c1BlclBhZ2UpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBlbHNlIHtcblx0ICAgICAgICBcdCRzY29wZS5udW1iZXJPZlBhZ2VzID0gTWF0aC5jZWlsKCRzY29wZS51c2VyX3Bvc3RzLmxlbmd0aC8kc2NvcGUucG9zdHNQZXJQYWdlKTtcblx0ICAgICAgICB9XG5cdCAgICB9O1xuXG5cblxuXHQgICAgLy9UaGlzIHdheSBJIGNhbiBkbzogIFwiPGxpIG5nLXJlcGVhdD1cIm4gaW4gcmFuZ2UocGFnZXMpIHRyYWNrIGJ5ICRpbmRleFwiPlwiIGFuZCBzbyBJIGNhbiBkaXNwbGF5IGFzIG1hbnkgaXRlbXMgYXMgdGhlIHZhbHVlIG9mIGEgbnVtYmVyIGFzIHRoaXMgcmV0dXJucyBhbiBhcnJheSBvZiB0aGF0IGxlbmdodFxuXHQgICAgJHNjb3BlLnJhbmdlID0gZnVuY3Rpb24obikge1xuICAgICAgICBcdHJldHVybiBuZXcgQXJyYXkobik7XG4gICAgXHR9O1xuXG5cdFx0LyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cdFx0LyBFbmQgUGFnaW5hdGlvbiBcblx0XHQvLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cblx0ICBcdFVzZXJTdmMuYXV0aG9yaXphdGlvbignMTAnKVxuXHRcdFx0LnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKXtcblx0XHRcdFx0Y29uc29sZS5sb2cocmVzcG9uc2UpO1xuXHRcdFx0fSlcblxuXHRcdC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXHRcdC8gUHJvZmlsZSBlZGl0IG9wdGlvbnMgXG5cdFx0Ly0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG5cdFx0JHNjb3BlLnNhdmVQcm9maWxlID0gZnVuY3Rpb24gKCkge1xuXG5cdFx0XHQvL2dldCB0aGUgaWQgb2YgdGhlIGN1cnJlbnRseSBsb2dnZWQgaW4gdXNlcidzIElELiBTbyB3ZSBjYW4gdXNlIHRoaXMgdG8gZWRpdCB0aGUgdXNlci4gdG9kbzogY2hhbmdlIHRoaXMgc28gdGhlIHN1cGVydXNlcnMgY2FuIGNob29zZSB3aG8gaXMgZWRpdGVkIHdoZW4gdGhleSB2aXNpdCB0aGUgcGFnZVxuXHRcdFx0dmFyIHByb2ZpbGVfZGV0YWlscyA9IHtcblx0XHRcdFx0X2lkIDogJHNjb3BlLnVzZXJfcHJvZmlsZS5faWRcblx0XHRcdH07XG5cblx0XHRcdC8vaXRlcmF0ZSB0aHJvdWdoIHRoZSBuZXcgZGV0YWlscywgaWYgdGhleSBhcmUgbm90IGVtcHR5IHRoZW4gYWRkIHRoZW0gdG8gdGhlIHByb2ZpbGUgZGV0YWlscyBvYmplY3Rcblx0XHRcdGZvciAodmFyIGtleSBpbiAkc2NvcGUubmV3KSB7XG5cdFx0XHQgIGlmICgkc2NvcGUubmV3Lmhhc093blByb3BlcnR5KGtleSkpIHtcblx0XHRcdCAgICAvL2FsZXJ0KGtleSArIFwiIC0+IFwiICsgJHNjb3BlLm5ld1trZXldKTtcblx0XHRcdCAgICBpZiAoJHNjb3BlLm5ld1trZXldICE9ICcnKSB7XG5cdFx0XHQgICAgXHRwcm9maWxlX2RldGFpbHNba2V5XSA9ICRzY29wZS5uZXdba2V5XTtcblx0XHRcdCAgICB9XG5cdFx0XHQgIH1cblx0XHRcdH1cblxuXHRcdFx0Ly9zZW5kIHRoaXMgcHJvZmlsZSBkZXRhaWxzIG9iZWplY3QgdG8gdGhlIHVzZXIgc2VydmljZS4gVGhpcyB0aGVuIHVwZGF0ZWQgb3IgYWRkcyBhbGwgZGV0YWlsIGluIHRoaXMgdG8gdGhlIHVzZXIgd2hvJ3MgSUQgd2FzIHNlbGVjdGVkIGVhcmxpZXJcblx0XHRcdFVzZXJTdmMucHJvZmlsZVVwZGF0ZShwcm9maWxlX2RldGFpbHMpXG5cdFx0XHRcdC5zdWNjZXNzKGZ1bmN0aW9uICh1c2VyKSB7XG5cdFx0XHRcdFx0Ly9jb25zb2xlLmxvZyh1c2VyKTtcblx0XHRcdFx0XHQvL1RoZSB1c2VybmFtZSBpcyB1c2VkIGFzIHBhcnQgb2YgdGhlIHVzZXJzIGxvZ2luIHRva2VuLCBzbyBpZiB0aGUgdXNlcm5hbWUgY2hhbmdlcyB0aGUgdG9rZW4gaXMgbm8gbG9uZ2VyIHZhbGlkICh0aGlzIGlzIG5lZWRlZCBmb3Igc2VjdXJpdHkgcmVhc29ucylcblx0XHRcdFx0XHQvL3RoZXJlZm9yZSBjaGFuZ2luZyBhIHVzZXJuYW1lIHdpbGwgZWZmZWN0aXZlbHkgbG9nIHNvbWVvbmUgb3V0LiBcblx0XHRcdFx0XHQvL1NvIHdlIG5lZWQgdG8gY2hlY2sgaWYgdGhlaXIgdXNlcm5hbWUgd2FzIGNoYW5nZWQsIGFuZCBpZiBpdCB3YXMgdGhlbiBzZW5kIHRoZW0gdG8gdGhlIGxvZ2luIHBhZ2Ugc28gdGhleSBjYW4gbG9nIGludG8gdGhleSBhY2NvdW50IGFnaWFuIGFuZCBnZXQgYSBuZXcgdG9rZW5cblx0XHRcdFx0XHRpZiAodXNlci51c2VybmFtZSAhPSAkc2NvcGUudXNlcl9wcm9maWxlLnVzZXJuYW1lKSB7XG5cdFx0XHRcdFx0XHQkc2NvcGUucmV0dXJuTWVzc2FnZSA9IFwiWW91ciB1c2VybmFtZSB3YXMgY2hhbmdlZCBzbyB5b3UgbXVzdCBsb2cgaW4gYWdhaW5cIjtcblx0XHRcdFx0XHRcdHNldFRpbWVvdXQoZnVuY3Rpb24oKXsgXG5cdFx0XHRcdFx0XHRcdHdpbmRvdy5sb2NhdGlvbi5ocmVmPSAnLyMvbG9naW4nO1xuXHRcdFx0XHRcdFx0fSwgMTUwMCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGVsc2Uge1xuXHRcdFx0XHRcdFx0JHNjb3BlLnJldHVybk1lc3NhZ2UgPSBcIkRldGFpbHMgdXBkYXRlZCBzdWNjZXNzZnVsbHlcIjtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XG5cdFx0XHRcdH0pXG5cdFx0fVxuXG5cdFx0LyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cdFx0LyBFbmQgcHJvZmlsZSBlZGl0IG9wdGlvbnMgXG5cdFx0Ly0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXHR9XSkiLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcblx0LmNvbnRyb2xsZXIoJ1JlZ2lzdGVyQ3RybCcgLCBbXCIkc2NvcGVcIiAsIFwiVXNlclN2Y1wiICwgZnVuY3Rpb24gKCRzY29wZSwgVXNlclN2Yykge1xuXHRcdCRzY29wZS5yZWdpc3RlciA9IGZ1bmN0aW9uICh1c2VybmFtZSwgcGFzc3dvcmQsIHBhc3N3b3JkX2NvbmZpcm0pIHtcblx0XHRcdGlmIChwYXNzd29yZCAhPSBwYXNzd29yZF9jb25maXJtKSB7XG5cdFx0XHRcdCRzY29wZS52YWxpZGF0aW9uTWVzc2FnZSA9ICdZb3VyIHBhc3N3b3JkcyBkaWQgbm90IG1hdGNoLic7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblx0XHRcdFVzZXJTdmMucmVnaXN0ZXIodXNlcm5hbWUsIHBhc3N3b3JkKVxuXHRcdH1cblx0fV0pIiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpXG5cdC5jb25maWcoW1wiJHJvdXRlUHJvdmlkZXJcIiwgZnVuY3Rpb24gKCRyb3V0ZVByb3ZpZGVyKSB7XG5cdFx0JHJvdXRlUHJvdmlkZXJcblx0XHRcdC53aGVuKCcvJyAsIHtjb250cm9sbGVyOiAnUG9zdHNDdHJsJywgdGVtcGxhdGVVcmw6ICdwb3N0L2FsbFBvc3RzLmh0bWwnfSlcblx0XHRcdC8vLndoZW4oJy9yZWdpc3RlcicgLCB7Y29udHJvbGxlcjogJ1JlZ2lzdGVyQ3RybCcsIHRlbXBsYXRlVXJsOiAncmVnaXN0ZXIuaHRtbCd9KVxuXHRcdFx0LndoZW4oJy9sb2dpbicgLCB7Y29udHJvbGxlcjogJ0xvZ2luQ3RybCcsIHRlbXBsYXRlVXJsOiAnbG9naW4uaHRtbCd9KVxuXHRcdFx0LndoZW4oJy9wb3N0Lzp5ZWFyLzptb250aC86ZGF5LzpzbHVnJyAsIHtjb250cm9sbGVyOiAnU2luZ2xlUG9zdEN0cmwnLCB0ZW1wbGF0ZVVybDogJ3Bvc3Qvc2luZ2xlUG9zdC5odG1sJ30pXG5cdFx0XHQud2hlbignL3Bvc3QvaWQvOmlkJyAsIHtjb250cm9sbGVyOiAnU2luZ2xlUG9zdEN0cmwnLCB0ZW1wbGF0ZVVybDogJ3NpbmdsZVBvc3QuaHRtbCd9KVxuXHRcdFx0LndoZW4oJy9wb3N0L25ldy8nICwge2NvbnRyb2xsZXI6ICdQb3N0c0N0cmwnLCB0ZW1wbGF0ZVVybDogJ3Bvc3QvbmV3UG9zdC5odG1sJ30pXG5cdFx0XHQud2hlbignL3VzZXIvOnVzZXJuYW1lJyAsIHtjb250cm9sbGVyOiAnUHJvZmlsZUN0cmwnLCB0ZW1wbGF0ZVVybDogJ3Bvc3QvdXNlclBvc3RzLmh0bWwnfSlcblx0XHRcdC53aGVuKCcvdGFnLzp0YWcnICwge2NvbnRyb2xsZXI6ICdUYWdDdHJsJywgdGVtcGxhdGVVcmw6ICdwb3N0L3RhZ1BhZ2UuaHRtbCd9KVxuXHRcdFx0Ly8ud2hlbignL3VzZXIvOnVzZXJuYW1lL2VkaXQnICwge2NvbnRyb2xsZXI6ICdQcm9maWxlQ3RybCcsIHRlbXBsYXRlVXJsOiAncHJvZmlsZS91c2VyUHJvZmlsZS5odG1sJ30pXG5cdFx0XHQvLy53aGVuKCcvdXNlci86dXNlcm5hbWUvcHJvZmlsZScgLCB7Y29udHJvbGxlcjogJ1Byb2ZpbGVDdHJsJywgdGVtcGxhdGVVcmw6ICdwcm9maWxlL3VzZXJWaWV3Lmh0bWwnfSlcblx0fV0pIiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpXG5cdC5jb250cm9sbGVyKCdTaW5nbGVQb3N0Q3RybCcsIFtcIiRzY29wZVwiICwgXCIkaHR0cFwiLCBcIlBvc3RzU2VydmljZVwiLCBcIiRyb3V0ZVBhcmFtc1wiLCBcIiRyb3V0ZVwiLCBcIiRsb2NhdGlvblwiICwgZnVuY3Rpb24gKCRzY29wZSwgJGh0dHAsIFBvc3RzU2VydmljZSwgJHJvdXRlUGFyYW1zLCAkcm91dGUsICRsb2NhdGlvbikge1xuXG5cdFx0JHNjb3BlLnNpbmdsZVBvc3RWaWV3ID0gdHJ1ZTsgLy8gbWFrZXMgaXQgYSBiaXQgZWFzaWVyIHRvIGNoYW5nZSB0aGUgc3R5bGluZyBvZiB0aGUgcG9zdCBvbiBpdHMgc2luZ2xlIHBvc3QgcGFnZSB3aGlsZSB1c2luZyB0aGUgc2FtZSB0ZW1wbGF0ZSBhcyB0aGUgbXVsdGkgcG9zdCBzdW1tYXJ5IHBhZ2VzXG5cblx0XHQkc2NvcGUuJG9uKCckdmlld0NvbnRlbnRMb2FkZWQnLCBmdW5jdGlvbigpe1xuXHRcdFx0Ly90aGUgcGFnZSBpcyByZWFkeVxuXHRcdH0pO1xuXG5cdFx0JHNjb3BlLmRlbGV0ZUl0ZW0gPSBmdW5jdGlvbiAoKSB7XG5cdFx0XHRQb3N0c1NlcnZpY2UucmVtb3ZlSXRlbSh7XG5cdFx0XHRcdFx0cG9zdF9pZDogJHNjb3BlLnBvc3QuX2lkXG5cdFx0XHRcdH0pXG5cdFx0XHRcdC5zdWNjZXNzKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuXHRcdFx0XHRcdGNvbnNvbGUubG9nKHJlc3BvbnNlKTtcblx0XHRcdFx0XHQvLyBjb25maXJtIHN1Y2Nlc3NmdWwgZGVsZXRlXG5cdFx0XHRcdH0pXG5cdFx0fTtcblxuXHRcdCRzY29wZS5wcmV0dGlmeUNvZGUgPSBmdW5jdGlvbigpIHtcblx0XHRcdFBSLnByZXR0eVByaW50KCk7XG5cdFx0fTtcblxuICAgICAgICB2YXIgcG9zdFNsdWcgPSAkcm91dGVQYXJhbXMuc2x1ZztcbiAgICAgICAgdmFyIHBvc3RJRCA9ICRyb3V0ZVBhcmFtcy5pZDtcblxuXHRcdGlmIChwb3N0U2x1Zykge1xuICAgICAgICAgICAgdmFyIGZ1bGxQb3N0U2x1ZyA9ICcnO1xuICAgICAgICAgICAgZnVsbFBvc3RTbHVnICs9ICRyb3V0ZVBhcmFtcy55ZWFyICsgJy8nO1xuICAgICAgICAgICAgZnVsbFBvc3RTbHVnICs9ICRyb3V0ZVBhcmFtcy5tb250aCArICcvJztcbiAgICAgICAgICAgIGZ1bGxQb3N0U2x1ZyArPSAkcm91dGVQYXJhbXMuZGF5ICsgJy8nO1xuICAgICAgICAgICAgZnVsbFBvc3RTbHVnICs9ICRyb3V0ZVBhcmFtcy5zbHVnO1xuXG4gICAgICAgICAgICBQb3N0c1NlcnZpY2Uuc2luZ2xlX3NsdWcoe1xuXHRcdFx0XHRzbHVnOiBmdWxsUG9zdFNsdWdcblx0XHRcdH0pXG5cdFx0XHQuc3VjY2VzcyhmdW5jdGlvbiAocG9zdCkge1xuXHRcdFx0XHQkc2NvcGUucG9zdCA9IHBvc3RbMF07XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJHNjb3BlLnBvc3QpO1xuICAgICAgICAgICAgfSlcblx0XHR9XG5cdFx0ZWxzZSBpZiAocG9zdElEKSB7XG5cdFx0XHRQb3N0c1NlcnZpY2Uuc2luZ2xlX2lkKHtcblx0XHRcdFx0aWQ6IHBvc3RJRFxuXHRcdFx0fSlcdFx0XG5cdFx0XHQuc3VjY2VzcyhmdW5jdGlvbiAocG9zdCkge1xuXHRcdFx0XHQkc2NvcGUucG9zdCA9IHBvc3RbMF07XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJHNjb3BlLnBvc3QpO1xuXHRcdFx0fSlcblx0XHR9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8gdGhlIHVybCBkb2VzIG5vdCBjb250YWluIGEgdmFsaWQgcG9zdCBzbHVnIG9yIGlkXG4gICAgICAgICAgICAvLyBzaG93IGVycm9yIHRvIHVzZXJcbiAgICAgICAgfVxuXG5cdH1dKSIsIi8qKlxuICogQ3JlYXRlZCBieSB0b21pIG9uIDA1LzAzLzE2LlxuICovXG5cbmFuZ3VsYXIubW9kdWxlKCdhcHAnKVxuICAgIC5jb250cm9sbGVyKCdUYWdDdHJsJywgW1wiJHNjb3BlXCIgLCBcIiRodHRwXCIsIFwiVXNlclN2Y1wiLCBcIlBvc3RzU2VydmljZVwiICwgXCIkcm91dGVQYXJhbXNcIiwgXCIkcm91dGVcIiwgXCIkbG9jYXRpb25cIiAsIGZ1bmN0aW9uICgkc2NvcGUsICRodHRwLCBVc2VyU3ZjLCBQb3N0c1NlcnZpY2UsICRyb3V0ZVBhcmFtcywgJHJvdXRlLCAkbG9jYXRpb24pIHtcblxuICAgICAgICAkc2NvcGUuYmFzZVVybCA9IGxvY2F0aW9uLmhvc3Q7XG4gICAgICAgIHZhciB0YWcgPSAkcm91dGVQYXJhbXMudGFnO1xuICAgICAgICAkc2NvcGUubmV3ICA9IHt9O1xuXG4gICAgICAgICRzY29wZS50YWdUaXRsZSA9IHRhZztcblxuICAgICAgICBQb3N0c1NlcnZpY2UuZmlsdGVyZWRfcG9zdHMgKHtcbiAgICAgICAgICAgICAgICB0YWdzOiB0YWdcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuc3VjY2VzcyhmdW5jdGlvbiAodGFnZ2VkUG9zdHMpIHtcbiAgICAgICAgICAgICAgICAkc2NvcGUucG9zdHMgPSB0YWdnZWRQb3N0cztcbiAgICAgICAgICAgIH0pO1xuICAgIH1dKSIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxuXHQuc2VydmljZSgnVXNlclN2YycsIFtcIiRodHRwXCIsIGZ1bmN0aW9uKCRodHRwKSB7XG5cdFx0dmFyIHN2YyA9IHRoaXM7XG5cblx0XHRzdmMuZ2V0VXNlciA9IGZ1bmN0aW9uICgpIHtcblx0XHRcdCRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uWydYLUF1dGgnXSA9IHdpbmRvdy5sb2NhbFN0b3JhZ2UudG9rZW5cblx0XHRcdHJldHVybiAkaHR0cC5nZXQoJy9hcGkvdXNlcnMnKVxuXHRcdFx0LnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICBcdFx0XHRyZXR1cm4gcmVzcG9uc2VcbiAgICBcdFx0fSlcblx0XHR9XG5cblx0XHRzdmMubG9naW4gPSBmdW5jdGlvbiAodXNlcm5hbWUsIHBhc3N3b3JkKSB7XG5cdFx0XHRyZXR1cm4gJGh0dHAucG9zdCgnL2FwaS9zZXNzaW9ucycsIHtcblx0XHRcdFx0dXNlcm5hbWU6IHVzZXJuYW1lLCBwYXNzd29yZDogcGFzc3dvcmRcblx0XHRcdH0pXG5cdFx0XHQudGhlbihmdW5jdGlvbiAodmFsKSB7XG5cdFx0XHRcdHdpbmRvdy5sb2NhbFN0b3JhZ2UudG9rZW4gPSB2YWwuZGF0YTtcblx0XHRcdFx0JGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb25bJ1gtQXV0aCddID0gdmFsLmRhdGFcblx0XHRcdFx0cmV0dXJuIHN2Yy5nZXRVc2VyKCk7XG5cdFx0XHR9KVxuXHRcdH1cblxuXHRcdHN2Yy5yZWdpc3RlciA9IGZ1bmN0aW9uICh1c2VybmFtZSwgcGFzc3dvcmQsIHBhc3N3b3JkX2NvbmZpcm0pIHtcblx0XHRcdHJldHVybiAkaHR0cC5wb3N0KCcvYXBpL3VzZXJzJywge1xuXHRcdFx0XHR1c2VybmFtZTogdXNlcm5hbWUsIHBhc3N3b3JkOiBwYXNzd29yZFxuXHRcdFx0fSlcblx0XHRcdC50aGVuKGZ1bmN0aW9uICh2YWwpIHtcblx0XHRcdFx0cmV0dXJuIHN2Yy5sb2dpbih1c2VybmFtZSwgcGFzc3dvcmQpXG5cdFx0XHRcdFx0LnRoZW4oZnVuY3Rpb24oKXtcblx0XHRcdFx0XHRcdHdpbmRvdy5sb2NhdGlvbi5ocmVmPSAnLyc7XG5cdFx0XHRcdFx0fSlcblx0XHRcdH0pXG5cdFx0fVxuXG5cdFx0c3ZjLmF1dGhvcml6YXRpb24gPSBmdW5jdGlvbiAocGVybWlzc2lvbl9sZXZlbCkge1xuXHRcdFx0JGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb25bJ1gtQXV0aCddID0gd2luZG93LmxvY2FsU3RvcmFnZS50b2tlbjtcblx0XHRcdHJldHVybiAkaHR0cC5nZXQoJy9hcGkvdXNlcnMvcGVybWlzc2lvbnMnKVxuXHRcdFx0LnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG5cdFx0XHRcdGNvbnNvbGUubG9nKHJlc3BvbnNlKTtcblx0XHRcdFx0aWYgKHJlc3BvbnNlLmRhdGEgPiBwZXJtaXNzaW9uX2xldmVsKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fSlcblx0XHR9XG5cblx0XHRzdmMubG9nb3V0ID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0d2luZG93LmxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKCd0b2tlbicpO1xuXHRcdFx0d2luZG93LmxvY2F0aW9uLmhyZWY9ICcvJztcblx0XHR9XG5cblx0XHRzdmMucHJvZmlsZSA9IGZ1bmN0aW9uICh1c2VybmFtZSkge1xuXHRcdFx0cmV0dXJuICRodHRwLmdldCgnL2FwaS91c2Vycy9wcm9maWxlJywgeyBwYXJhbXM6IHt1c2VybmFtZTogdXNlcm5hbWV9IH0pXG5cdFx0fVxuXG5cdFx0c3ZjLnByb2ZpbGVVcGRhdGUgPSBmdW5jdGlvbiAocHJvZmlsZSkge1xuXHRcdFx0cmV0dXJuICRodHRwLnBvc3QoJy9hcGkvdXNlcnMvcHJvZmlsZScsIHByb2ZpbGUgKVxuXHRcdH1cblx0fV0pIiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpXG4ucnVuKFtcIiRyb290U2NvcGVcIiwgXCIkdGltZW91dFwiICwgXCIkd2luZG93XCIgLCBmdW5jdGlvbiAoJHJvb3RTY29wZSwgJHRpbWVvdXQsICR3aW5kb3cpIHtcblxuXHR2YXIgcmVjb25uZWN0X2RlbGF5ID0gMTA7XG5cdFxuXHQoZnVuY3Rpb24gY29ubmVjdCgpe1xuXHRcdC8vaW5jcmVtZW50IHRoZSByZWNvbm5lY3QgZGVsYXkgdGltZWVyXG5cdFx0cmVjb25uZWN0X2RlbGF5ICs9IHJlY29ubmVjdF9kZWxheTtcblxuXHRcdC8vQ3JlYXRlIGEgd2Vic29ja2V0IGNvbm5lY3Rpb24gd2l0aCB0aGUgc2VydmVyXG5cdFx0dmFyIGhvc3QgPSBcIndzOi8vXCIgKyAkd2luZG93LmxvY2F0aW9uLmhvc3Rcblx0XHQgIFxuXHRcdHZhciBjb25uZWN0aW9uID0gbmV3IFdlYlNvY2tldChob3N0KVxuXG5cdFx0Y29ubmVjdGlvbi5vbm9wZW4gPSBmdW5jdGlvbiAoKSB7XG5cdFx0XHQvL2NvbnNvbGUubG9nKCdXZWJzb2NrZXQgY29ubmVjdGVkJylcblx0XHR9XG5cblxuXHRcdGNvbm5lY3Rpb24ub25jbG9zZSA9IGZ1bmN0aW9uIChlKSB7XG5cdFx0XHRjb25zb2xlLmxvZygnV2Vic29ja2V0IGNvbm5lY3Rpb24gY2xvc2VkLiBBdHRlbXB0aW5nIHRvIHJlY2Nvbm5lY3QgaW4gJyArIHJlY29ubmVjdF9kZWxheSArICcgc2Vjb25kcycgKVxuXG5cdFx0XHQkdGltZW91dChjb25uZWN0LCByZWNvbm5lY3RfZGVsYXkqMTAwMCk7XG5cdFx0fSBcblxuXHRcdGNvbm5lY3Rpb24ub25tZXNzYWdlID0gZnVuY3Rpb24gKGUpIHtcblx0XHRcdC8vY29uc29sZS5sb2coZSk7XG5cdFx0XHR2YXIgbWVzc2FnZSA9IEpTT04ucGFyc2UoZS5kYXRhKTtcblx0XHRcdFxuXHRcdFx0dmFyIG5hbWUgPSAnd3M6JyArIG1lc3NhZ2UudG9waWM7XG5cdFx0XHR2YXIgZGF0YSA9IG1lc3NhZ2UuZGF0YTtcblx0XHRcdC8vY29uc29sZS5sb2coXCJicm9hZGNhc3Rpbmc6IFwiKTtcblxuXHRcdFx0JHJvb3RTY29wZS4kYnJvYWRjYXN0KG5hbWUsIGRhdGEpO1xuXHRcdH1cblx0fSkoKVxufV0pIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9