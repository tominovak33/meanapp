angular.module("app",["ngRoute","ngAnimate"]),angular.module("app").controller("ApplicationCtrl",["$scope","$rootScope","UserSvc",function(e,t,n){e.baseUrl=location.host,window.localStorage.token&&n.getUser().then(function(t){e.$emit("userLoggedIn",t.data)}),e.$on("userLoggedIn",function(t,n){e.currentUser=n})}]).filter("output_html",["$sce",function(e){return function(t){return e.trustAsHtml(t)}}]).filter("startFrom",function(){return function(e,t){return e?(t=+t,e.slice(t)):[]}}),angular.module("app").controller("LoginCtrl",["$scope","UserSvc",function(e,t){e.login=function(n,o){t.login(n,o).then(function(t){e.$emit("userLoggedIn",t.data),window.location.href="#/"},function(t){e.loginValidation="Incorrect username & password combination"})},e.logout=function(){t.logout()}}]),angular.module("app").controller("PostsCtrl",["$scope","$http","PostsService","filterFilter",function(e,t,n,o){e.baseUrl=location.host,e.bodyLengthLimit=250,e.postTagsArray=[],e.posts=[],e.addPost=function(){var t=CKEDITOR.instances.editor1.getData(),o=e.urlDate(),r=e.slugify(e.postTitle),s=o+r;t&&n.send({body:t,title:e.postTitle,tags:e.postTagsArray,slug:s}).success(function(t){e.postBody=null,CKEDITOR.instances.editor1.setData(""),e.postTitle=null})},e.init_ckedit=function(){CKEDITOR.replace("editor1")},e.$on("ws:new_post",function(t,n){n=n[0],e.$apply(function(){e.posts.unshift(n),e.paginate()})}),e.$on("$viewContentLoaded",function(){}),e.currentPage=1,e.postsPerPage=5,e.prevPage=function(){e.currentPage>1&&e.currentPage--},e.nextPage=function(){e.currentPage<e.posts.length/e.postsPerPage&&e.currentPage++},e.setPage=function(t){e.currentPage=t},e.range=function(e){return new Array(e)},e.$watch("search",function(t){e.filteredPosts=o(e.posts,t),e.paginate(e.filteredPosts.length)},!0),e.paginate=function(t){e.numberOfPages=Math.ceil(t>0?t/e.postsPerPage:e.posts.length/e.postsPerPage)},e.urlDate=function(e){if(void 0===e)var t=new Date;else var t=new Date(e);var n=t.getDate(),o=t.getMonth()+1,r=t.getFullYear(),s=String(r)+"-"+String(o)+"-"+String(n)+"-";return s},e.slugify=function(e){var t=e.toLowerCase();return t=t.replace(/\s+/g,"_"),t=t.replace(/\?/g,""),t=t.replace(/\&/g,""),t=t.replace(/\=/g,"")},e.addTag=function(t){e.postTagsArray.push(t),e.postTag=""},n.get().success(function(t){e.posts=t,e.paginate(e.posts.length)})}]),angular.module("app").service("PostsService",["$http",function(e){this.get=function(){return e.get("/api/posts")},this.send=function(t){return e.post("/api/posts",t)},this.removeItem=function(t){return e.post("/api/posts/removeItem",{params:{post_id:t.post_id}})},this.single_slug=function(t){return e.get("/api/posts",{params:{post_slug:t.slug}})},this.single_id=function(t){return e.get("/api/posts",{params:{post_id:t.id}})},this.user_posts=function(t){return e.get("/api/posts",{params:{_author:t._author}})}}]),angular.module("app").controller("ProfileCtrl",["$scope","$http","UserSvc","PostsService","$routeParams","$route","$location",function(e,t,n,o,r,s,i){e.editPermission=function(t){n.authorization().then(function(t){e=t})},e.baseUrl=location.host;var a=r.username;e["new"]={},n.profile(a).success(function(t){e.user_profile=t,o.user_posts({_author:e.user_profile._id}).success(function(t){e.user_posts=t,e.paginate(e.user_posts.length)})}),e.checkLogin=function(){window.localStorage.token&&n.getUser().then(function(t){e.currentUser=t.data,(e.user_profile._id==e.currentUser._id||e.editPermission(e.currentUser.permission_level))&&(e.canEdit=!0)})},e.currentUser=[],e.checkLogin(),e.$on("$viewContentLoaded",function(){}),e.user_posts=[],e.currentPage=1,e.postsPerPage=5,e.prevPage=function(){e.currentPage>1&&e.currentPage--},e.nextPage=function(){e.currentPage<e.user_posts.length/e.postsPerPage&&e.currentPage++},e.setPage=function(t){e.currentPage=t},e.range=function(e){return new Array(e)},e.paginate=function(t){e.numberOfPages=Math.ceil(t>0?t/e.postsPerPage:e.user_posts.length/e.postsPerPage)},e.range=function(e){return new Array(e)},n.authorization("10").then(function(e){console.log(e)}),e.saveProfile=function(){var t={_id:e.user_profile._id};for(var o in e["new"])e["new"].hasOwnProperty(o)&&""!=e["new"][o]&&(t[o]=e["new"][o]);n.profileUpdate(t).success(function(t){t.username!=e.user_profile.username?(e.returnMessage="Your username was changed so you must log in again",setTimeout(function(){window.location.href="/#/login"},1500)):e.returnMessage="Details updated successfully"})}}]),angular.module("app").controller("RegisterCtrl",["$scope","UserSvc",function(e,t){e.register=function(n,o,r){return o!=r?void(e.validationMessage="Your passwords did not match."):void t.register(n,o)}}]),angular.module("app").config(["$routeProvider",function(e){e.when("/",{controller:"PostsCtrl",templateUrl:"posts.html"}).when("/register",{controller:"RegisterCtrl",templateUrl:"register.html"}).when("/login",{controller:"LoginCtrl",templateUrl:"login.html"}).when("/logout",{controller:"LoginCtrl",templateUrl:"logout.html"}).when("/post/:slug",{controller:"SinglePostCtrl",templateUrl:"singlePost.html"}).when("/post/id/:id",{controller:"SinglePostCtrl",templateUrl:"singlePost.html"}).when("/user/:username",{controller:"ProfileCtrl",templateUrl:"user.html"}).when("/user/:username/edit",{controller:"ProfileCtrl",templateUrl:"profile/userProfile.html"})}]),angular.module("app").controller("SinglePostCtrl",["$scope","$http","PostsService","$routeParams","$route","$location",function(e,t,n,o,r,s){var i=o.slug,a=o.id;e.$on("$viewContentLoaded",function(){}),e.deleteItem=function(){n.removeItem({post_id:e.post._id}).success(function(e){console.log(e)})},i?n.single_slug({slug:i}).success(function(t){e.post=t[0]}):n.single_id({id:a}).success(function(t){e.post=t[0]})}]),angular.module("app").service("UserSvc",["$http",function(e){var t=this;t.getUser=function(){return e.defaults.headers.common["X-Auth"]=window.localStorage.token,e.get("/api/users").then(function(e){return e})},t.login=function(n,o){return e.post("/api/sessions",{username:n,password:o}).then(function(n){return window.localStorage.token=n.data,e.defaults.headers.common["X-Auth"]=n.data,t.getUser()})},t.register=function(n,o,r){return e.post("/api/users",{username:n,password:o}).then(function(e){return t.login(n,o).then(function(){window.location.href="/"})})},t.authorization=function(t){return e.defaults.headers.common["X-Auth"]=window.localStorage.token,e.get("/api/users/permissions").then(function(e){return console.log(e),e.data>t?!0:!1})},t.logout=function(){window.localStorage.removeItem("token"),window.location.href="/"},t.profile=function(t){return e.get("/api/users/profile",{params:{username:t}})},t.profileUpdate=function(t){return e.post("/api/users/profile",t)}}]),angular.module("app").run(["$rootScope","$timeout","$window",function(e,t,n){var o=10;!function r(){o+=o;var s="ws://"+n.location.host,i=new WebSocket(s);i.onopen=function(){},i.onclose=function(e){console.log("Websocket connection closed. Attempting to recconnect in "+o+" seconds"),t(r,1e3*o)},i.onmessage=function(t){var n=JSON.parse(t.data),o="ws:"+n.topic,r=n.data;e.$broadcast(o,r)}}()}]);
//# sourceMappingURL=data:application/json;base64,