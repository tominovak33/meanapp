angular.module("app",["ngRoute","ngAnimate"]),angular.module("app").controller("ApplicationCtrl",["$scope","$rootScope","UserSvc",function(t,e,o){t.baseUrl=location.host,window.localStorage.token&&o.getUser().then(function(e){t.$emit("userLoggedIn",e.data)}),t.$on("userLoggedIn",function(e,o){t.currentUser=o})}]).filter("output_html",["$sce",function(t){return function(e){return t.trustAsHtml(e)}}]).filter("startFrom",function(){return function(t,e){return t?(e=+e,t.slice(e)):[]}}),angular.module("app").directive("staticInclude",["$http","$templateCache","$compile",function(t,e,o){return function(n,r,s){var a=s.staticInclude;t.get(a,{cache:e}).success(function(t){var e=r.html(t).contents();o(e)(n)})}}]),angular.module("app").controller("LoginCtrl",["$scope","UserSvc",function(t,e){t.login=function(o,n){e.login(o,n).then(function(e){t.$emit("userLoggedIn",e.data),window.location.href="#/"},function(e){t.loginValidation="Incorrect username & password combination"})},t.logout=function(){e.logout()}}]),angular.module("app").controller("PostsCtrl",["$scope","$http","PostsService","filterFilter","UserSvc","$timeout",function(t,e,o,n,r,s){t.baseUrl=location.host,t.bodyLengthLimit=250,t.postTagsArray=[],t.ckLoaded=!1,t.posts=[],t.addPost=function(){try{var e=CKEDITOR.instances.editor1.getData()}catch(n){console.error("CKEDITOR has not been loaded")}if(!e)var e=t.postContent;var r=t.urlDate(),s=t.slugify(t.postTitle),a=r+s;e&&o.send({body:e,title:t.postTitle,tags:t.postTagsArray,slug:a}).success(function(e){t.postBody=null,CKEDITOR.instances.editor1.setData(""),t.postTitle=null})},t.$on("$includeContentLoaded",function(){t.init_ckeditor()}),t.init_ckeditor=function(){t.ckLoaded=!0;try{{CKEDITOR.replace("editor1")}}catch(e){t.ckLoaded=!1,console.log("Error: "+e)}},t.$on("ws:new_post",function(e,o){o=o[0],t.$apply(function(){t.posts.unshift(o),t.paginate()})}),t.$on("$viewContentLoaded",function(){}),t.currentPage=1,t.postsPerPage=5,t.prevPage=function(){t.currentPage>1&&t.currentPage--},t.nextPage=function(){t.currentPage<t.posts.length/t.postsPerPage&&t.currentPage++},t.setPage=function(e){t.currentPage=e},t.range=function(t){return new Array(t)},t.$watch("search",function(e){t.filteredPosts=n(t.posts,e),t.paginate(t.filteredPosts.length)},!0),t.paginate=function(e){t.numberOfPages=Math.ceil(e>0?e/t.postsPerPage:t.posts.length/t.postsPerPage)},t.urlDate=function(t){if(void 0===t)var e=new Date;else var e=new Date(t);var o=e.getDate(),n=e.getMonth()+1,r=e.getFullYear();return String(r)+"/"+String(n)+"/"+String(o)+"/"},t.$watch("postTitle",function(e){e&&t.generateSlug(e)},!0),t.generateSlug=function(){t.slug=t.urlDate()+t.slugify(t.postTitle)},t.slugify=function(t){var e=t.toLowerCase();return e=e.replace(/\s+/g,"-"),e=e.replace(/\?/g,""),e=e.replace(/\&/g,""),e=e.replace(/\=/g,"")},t.addTag=function(e){t.postTagsArray.push(e),t.postTag=""},t.removeTag=function(e){t.postTagsArray.splice(e,1)},o.get().success(function(e){t.posts=e,t.paginate(t.posts.length)})}]),angular.module("app").service("PostsService",["$http",function(t){this.get=function(){return t.get("/api/posts")},this.send=function(e){return t.post("/api/posts",e)},this.removeItem=function(e){return t.post("/api/posts/removeItem",{params:{post_id:e.post_id}})},this.single_slug=function(e){return t.get("/api/posts",{params:{post_slug:e.slug}})},this.single_id=function(e){return t.get("/api/posts",{params:{post_id:e.id}})},this.user_posts=function(e){return t.get("/api/posts",{params:{_author:e._author}})},this.filtered_posts=function(e){return t.get("/api/posts",{params:e})}}]),angular.module("app").controller("ProfileCtrl",["$scope","$http","UserSvc","PostsService","$routeParams","$route","$location",function(t,e,o,n,r,s,a){t.editPermission=function(e){o.authorization().then(function(e){t=e})},t.baseUrl=location.host;var i=r.username;t["new"]={},o.profile(i).success(function(e){t.user_profile=e,n.user_posts({_author:t.user_profile._id}).success(function(e){t.user_posts=e,t.paginate(t.user_posts.length)})}),t.checkLogin=function(){window.localStorage.token&&o.getUser().then(function(e){t.currentUser=e.data,(t.user_profile._id==t.currentUser._id||t.editPermission(t.currentUser.permission_level))&&(t.canEdit=!0)})},t.currentUser=[],t.checkLogin(),t.$on("$viewContentLoaded",function(){}),t.user_posts=[],t.currentPage=1,t.postsPerPage=5,t.prevPage=function(){t.currentPage>1&&t.currentPage--},t.nextPage=function(){t.currentPage<t.user_posts.length/t.postsPerPage&&t.currentPage++},t.setPage=function(e){t.currentPage=e},t.range=function(t){return new Array(t)},t.paginate=function(e){t.numberOfPages=Math.ceil(e>0?e/t.postsPerPage:t.user_posts.length/t.postsPerPage)},t.range=function(t){return new Array(t)},o.authorization("10").then(function(t){console.log(t)}),t.saveProfile=function(){var e={_id:t.user_profile._id};for(var n in t["new"])t["new"].hasOwnProperty(n)&&""!=t["new"][n]&&(e[n]=t["new"][n]);o.profileUpdate(e).success(function(e){e.username!=t.user_profile.username?(t.returnMessage="Your username was changed so you must log in again",setTimeout(function(){window.location.href="/#/login"},1500)):t.returnMessage="Details updated successfully"})}}]),angular.module("app").controller("RegisterCtrl",["$scope","UserSvc",function(t,e){t.register=function(o,n,r){return n!=r?void(t.validationMessage="Your passwords did not match."):void e.register(o,n)}}]),angular.module("app").config(["$routeProvider",function(t){t.when("/",{controller:"PostsCtrl",templateUrl:"post/allPosts.html"}).when("/login",{controller:"LoginCtrl",templateUrl:"login.html"}).when("/logout",{controller:"LoginCtrl",templateUrl:"logout.html"}).when("/post/:year/:month/:day/:slug",{controller:"SinglePostCtrl",templateUrl:"post/singlePost.html"}).when("/post/id/:id",{controller:"SinglePostCtrl",templateUrl:"singlePost.html"}).when("/post/new/",{controller:"PostsCtrl",templateUrl:"post/newPost.html"}).when("/user/:username",{controller:"ProfileCtrl",templateUrl:"post/userPosts.html"}).when("/tag/:tag",{controller:"TagCtrl",templateUrl:"post/tagPage.html"})}]),angular.module("app").controller("SinglePostCtrl",["$scope","$http","PostsService","$routeParams","$route","$location",function(t,e,o,n,r,s){t.$on("$viewContentLoaded",function(){}),t.deleteItem=function(){o.removeItem({post_id:t.post._id}).success(function(t){console.log(t)})};var a=n.slug,i=n.id;if(a){var u="";u+=n.year+"/",u+=n.month+"/",u+=n.day+"/",u+=n.slug,o.single_slug({slug:u}).success(function(e){t.post=e[0],console.log(t.post)})}else i&&o.single_id({id:i}).success(function(e){t.post=e[0],console.log(t.post)})}]),angular.module("app").controller("TagCtrl",["$scope","$http","UserSvc","PostsService","$routeParams","$route","$location",function(t,e,o,n,r,s,a){t.baseUrl=location.host;var i=r.tag;t["new"]={},t.tagTitle=i,n.filtered_posts({tags:i}).success(function(e){t.posts=e})}]),angular.module("app").service("UserSvc",["$http",function(t){var e=this;e.getUser=function(){return t.defaults.headers.common["X-Auth"]=window.localStorage.token,t.get("/api/users").then(function(t){return t})},e.login=function(o,n){return t.post("/api/sessions",{username:o,password:n}).then(function(o){return window.localStorage.token=o.data,t.defaults.headers.common["X-Auth"]=o.data,e.getUser()})},e.register=function(o,n,r){return t.post("/api/users",{username:o,password:n}).then(function(t){return e.login(o,n).then(function(){window.location.href="/"})})},e.authorization=function(e){return t.defaults.headers.common["X-Auth"]=window.localStorage.token,t.get("/api/users/permissions").then(function(t){return console.log(t),t.data>e?!0:!1})},e.logout=function(){window.localStorage.removeItem("token"),window.location.href="/"},e.profile=function(e){return t.get("/api/users/profile",{params:{username:e}})},e.profileUpdate=function(e){return t.post("/api/users/profile",e)}}]),angular.module("app").run(["$rootScope","$timeout","$window",function(t,e,o){var n=10;!function r(){n+=n;var s="ws://"+o.location.host,a=new WebSocket(s);a.onopen=function(){},a.onclose=function(t){console.log("Websocket connection closed. Attempting to recconnect in "+n+" seconds"),e(r,1e3*n)},a.onmessage=function(e){var o=JSON.parse(e.data),n="ws:"+o.topic,r=o.data;t.$broadcast(n,r)}}()}]);
//# sourceMappingURL=data:application/json;base64,